1、单点登录的英文名叫做：Single Sign On（简称SSO）。
单系统，所有的功能都在同一个系统上

比如阿里系的淘宝和天猫，很明显地我们可以知道这是两个系统，但是你在使用的时候，登录了天猫，淘宝也会自动登录。
简单来说，单点登录就是在多个系统中，用户只需一次登录，各个系统即可感知该用户已经登录

2、HTTP是无状态的协议，这意味着服务器无法确认用户的信息。
于是乎，W3C就提出了：给每一个用户都发一个通行证，无论谁访问的时候都需要携带通行证，这样服务器就可以从通行证上确认用户的信息。通行证就是Cookie。

Cookie是检查用户身上的”通行证“来确认用户的身份，
那么Session就是通过检查服务器上的”客户明细表“来确认用户的身份的。Session相当于在服务器中建立了一份“客户明细表”。

HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一个用户。
于是乎：服务器向用户浏览器发送了一个名为JESSIONID的Cookie，它的值是Session的id值。其实Session是依据Cookie来识别是否是同一个用户。

登录：将用户信息保存在Session对象中
        如果在Session对象中能查到，说明已经登录
        如果在Session对象中查不到，说明没登录（或者已经退出了登录）
注销（退出登录）：从Session中删除用户的信息
记住我（关闭掉浏览器后，重新打开浏览器还能保持登录状态）：配合Cookie来用


3、多系统之间的登录的问题
3.1 Session不共享问题

单系统登录功能主要是用Session保存用户信息来实现的，但我们清楚的是：
多系统即可能有多个Tomcat，而Session是依赖当前系统的Tomcat，所以系统A的Session和系统B的Session是不共享的。
    【Tomcat：开源 Java WEB 应用服务器，Tomcat 的 Connector 组件实现了 HTTP 请求的解析，可以把 Tomcat 看作是一个 HTTP 服务器】


解决系统之间Session不共享问题有一下几种方案：

    Tomcat集群Session全局复制

    （集群内每个tomcat的session完全同步）【会影响集群的性能呢，不建议】根据请求的IP进行Hash映射到对应的机器上（这就相当于请求的IP一直会访问同一个服务器）
    【如果服务器宕机了，会丢失了一大部分Session的数据，不建议】把Session数据放在Redis中（使用Redis模拟Session）【建议】
        如果还不了解Redis的同学，建议移步（Redis合集）

我们可以将登录功能单独抽取出来，做成一个子系统。



3.2 Cookie跨域的问题
上面我们解决了Session不能共享的问题，但其实还有另一个问题。
Cookie是不能跨域的比如说，我们请求<https://www.google.com/>时，浏览器会自动把google.com的Cookie带过去给google的服务器，
而不会把<https://www.baidu.com/>的Cookie带过去给google的服务器。
这就意味着，由于域名不同，用户向系统A登录后，系统A返回给浏览器的Cookie，用户再请求系统B的时候不会将系统A的Cookie带过去。

针对Cookie存在跨域问题，有几种解决方案：
（1）服务端将Cookie写到客户端后，客户端对Cookie进行解析，将Token解析出来，
（2）此后请求都把这个Token带上就行了多个域名共享Cookie，在写到客户端的时候设置Cookie的domain。
（3）将Token保存在SessionStroage中（不依赖Cookie就没有跨域的问题了）

3.3 CAS原理
单点登录，就肯定会见到这个名词：CAS （Central Authentication Service）
下面说说CAS是怎么搞的。如果已经将登录单独抽取成系统出来，我们还能这样玩。
现在我们有两个系统，分别是www.java3y.com（系统A）和www.java4y.com（系统B），一个SSOwww.sso.com（认证中心系统）

（1）首先，用户想要访问系统Awww.java3y.com受限的资源(比如说购物车功能，购物车功能需要登录后才能访问)，
系统Awww.java3y.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。请求的地址如下：

    www.sso.com?service=www.java3y.com

sso认证中心发现用户未登录，将用户引导至登录页面，用户进行输入用户名和密码进行登录，
    用户与认证中心建立全局会话（生成一份Token，写到Cookie中，保存在浏览器上）
    认证中心重定向回系统A，并把Token携带过去给系统A，重定向的地址如下：
    www.java3y.com?token=xxxxxxx
接着，系统A去sso认证中心验证这个Token是否正确，如果正确，则系统A和用户建立局部会话（创建Session）。到此，系统A和用户已经是登录状态了。


（2）用户想要访问系统Bwww.java4y.com受限的资源(比如说订单功能，订单功能需要登录后才能访问)，
系统Bwww.java4y.com发现用户并没有登录，于是重定向到sso认证中心，并将自己的地址作为参数。
请求的地址如下：www.sso.com?service=www.java4y.com注意，因为之前用户与认证中心www.sso.com已经建立了全局会话（当时已经把Cookie保存到浏览器上了），
所以这次系统B重定向到认证中心www.sso.com是可以带上Cookie的。
认证中心根据带过来的Cookie发现已经与用户建立了全局会话了，认证中心重定向回系统B，并把Token携带过去给系统B，重定向的地址如下：www.java4y.com?token=xxxxxxx
接着，系统B去sso认证中心验证这个Token是否正确，如果正确，则系统B和用户建立局部会话（创建Session）。到此，系统B和用户已经是登录状态了。













来源：
https://www.zhihu.com/search?q=%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86&utm_content=search_suggestion&type=content


